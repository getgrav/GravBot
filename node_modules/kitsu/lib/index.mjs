import _regeneratorRuntime from '@babel/runtime/regenerator';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';
import axios from 'axios';
import pluralise from 'pluralize';
import { camel, deserialise, error, kebab, query, serialise, snake } from 'kitsu-core';

class Kitsu {
  constructor() {
    let options = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};
    this.camel = !1 === options.camelCaseTypes ? s => s : camel, this.resCase = 'none' === options.resourceCase ? s => s : 'snake' === options.resourceCase ? snake : kebab, this.plural = !1 === options.pluralize ? s => s : pluralise, this.headers = Object.assign({}, options.headers, {
      Accept: 'application/vnd.api+json',
      "Content-Type": 'application/vnd.api+json'
    }), this.axios = axios.create({
      baseURL: options.baseURL || 'https://kitsu.io/api/edge',
      timeout: options.timeout || 30000
    }), this.fetch = this.get, this.update = this.patch, this.create = this.post, this.remove = this.delete;
  }

  get(model) {
    var _this = this,
        _arguments = arguments;

    return _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {
      var params, headers, _model$split, _model$split2, res, id, relationship, url, _ref, data;

      return _regeneratorRuntime.wrap(function (_context) {
        for (;;) switch (_context.prev = _context.next) {
          case 0:
            return params = 1 < _arguments.length && void 0 !== _arguments[1] ? _arguments[1] : {}, headers = 2 < _arguments.length && void 0 !== _arguments[2] ? _arguments[2] : {}, _context.prev = 1, _model$split = model.split('/'), _model$split2 = _slicedToArray(_model$split, 3), res = _model$split2[0], id = _model$split2[1], relationship = _model$split2[2], url = _this.plural(_this.resCase(res)), id && (url += `/${id}`), relationship && (url += `/${_this.resCase(relationship)}`), _context.next = 6, _this.axios.get(url, {
              params,
              paramsSerializer: p => query(p),
              headers: Object.assign(_this.headers, headers)
            });

          case 6:
            return _ref = _context.sent, data = _ref.data, _context.abrupt("return", deserialise(data));

          case 11:
            throw _context.prev = 11, _context.t0 = _context["catch"](1), error(_context.t0);

          case 14:
          case "end":
            return _context.stop();
        }
      }, _callee, this, [[1, 11]]);
    }))();
  }

  patch(model, body) {
    var _this2 = this,
        _arguments2 = arguments;

    return _asyncToGenerator(_regeneratorRuntime.mark(function _callee2() {
      var headers, serialData, url, _ref2, data;

      return _regeneratorRuntime.wrap(function (_context2) {
        for (;;) switch (_context2.prev = _context2.next) {
          case 0:
            return headers = 2 < _arguments2.length && void 0 !== _arguments2[2] ? _arguments2[2] : {}, _context2.prev = 1, _context2.next = 4, serialise.apply(_this2, [model, body, 'PATCH']);

          case 4:
            return serialData = _context2.sent, url = _this2.plural(_this2.resCase(model)) + '/' + body.id, _context2.next = 8, _this2.axios.patch(url, serialData, {
              headers: Object.assign(_this2.headers, headers)
            });

          case 8:
            return _ref2 = _context2.sent, data = _ref2.data, _context2.abrupt("return", data);

          case 13:
            throw _context2.prev = 13, _context2.t0 = _context2["catch"](1), error(_context2.t0);

          case 16:
          case "end":
            return _context2.stop();
        }
      }, _callee2, this, [[1, 13]]);
    }))();
  }

  post(model, body) {
    var _this3 = this,
        _arguments3 = arguments;

    return _asyncToGenerator(_regeneratorRuntime.mark(function _callee3() {
      var headers, url, _ref3, data;

      return _regeneratorRuntime.wrap(function (_context3) {
        for (;;) switch (_context3.prev = _context3.next) {
          case 0:
            return headers = 2 < _arguments3.length && void 0 !== _arguments3[2] ? _arguments3[2] : {}, _context3.prev = 1, url = _this3.plural(_this3.resCase(model)), _context3.t0 = _this3.axios, _context3.t1 = url, _context3.next = 7, serialise.apply(_this3, [model, body]);

          case 7:
            return _context3.t2 = _context3.sent, _context3.t3 = {
              headers: Object.assign(_this3.headers, headers)
            }, _context3.next = 11, _context3.t0.post.call(_context3.t0, _context3.t1, _context3.t2, _context3.t3);

          case 11:
            return _ref3 = _context3.sent, data = _ref3.data, _context3.abrupt("return", data);

          case 16:
            throw _context3.prev = 16, _context3.t4 = _context3["catch"](1), error(_context3.t4);

          case 19:
          case "end":
            return _context3.stop();
        }
      }, _callee3, this, [[1, 16]]);
    }))();
  }

  delete(model, id) {
    var _this4 = this,
        _arguments4 = arguments;

    return _asyncToGenerator(_regeneratorRuntime.mark(function _callee4() {
      var headers, url, _ref4, data;

      return _regeneratorRuntime.wrap(function (_context4) {
        for (;;) switch (_context4.prev = _context4.next) {
          case 0:
            return headers = 2 < _arguments4.length && void 0 !== _arguments4[2] ? _arguments4[2] : {}, _context4.prev = 1, url = _this4.plural(_this4.resCase(model)) + '/' + id, _context4.t0 = _this4.axios, _context4.t1 = url, _context4.next = 7, serialise.apply(_this4, [model, {
              id
            }, 'DELETE']);

          case 7:
            return _context4.t2 = _context4.sent, _context4.t3 = Object.assign(_this4.headers, headers), _context4.t4 = {
              data: _context4.t2,
              headers: _context4.t3
            }, _context4.next = 12, _context4.t0.delete.call(_context4.t0, _context4.t1, _context4.t4);

          case 12:
            return _ref4 = _context4.sent, data = _ref4.data, _context4.abrupt("return", data);

          case 17:
            throw _context4.prev = 17, _context4.t5 = _context4["catch"](1), error(_context4.t5);

          case 20:
          case "end":
            return _context4.stop();
        }
      }, _callee4, this, [[1, 17]]);
    }))();
  }

  self() {
    var _this5 = this,
        _arguments5 = arguments;

    return _asyncToGenerator(_regeneratorRuntime.mark(function _callee5() {
      var params, headers, res;
      return _regeneratorRuntime.wrap(function (_context5) {
        for (;;) switch (_context5.prev = _context5.next) {
          case 0:
            return params = 0 < _arguments5.length && void 0 !== _arguments5[0] ? _arguments5[0] : {}, headers = 1 < _arguments5.length && void 0 !== _arguments5[1] ? _arguments5[1] : {}, _context5.prev = 1, _context5.next = 4, _this5.get('users', Object.assign({
              filter: {
                self: !0
              }
            }, params), headers);

          case 4:
            return res = _context5.sent, _context5.abrupt("return", res.data[0]);

          case 8:
            throw _context5.prev = 8, _context5.t0 = _context5["catch"](1), error(_context5.t0);

          case 11:
          case "end":
            return _context5.stop();
        }
      }, _callee5, this, [[1, 8]]);
    }))();
  }

}

export default Kitsu;
