'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _slicedToArray = _interopDefault(require('@babel/runtime/helpers/slicedToArray'));
var _asyncToGenerator = _interopDefault(require('@babel/runtime/helpers/asyncToGenerator'));
var axios = _interopDefault(require('axios'));
var pluralise = _interopDefault(require('pluralize'));
var kitsuCore = require('kitsu-core/node');

class Kitsu {
  constructor(options = {}) {
    this.camel = !1 === options.camelCaseTypes ? s => s : kitsuCore.camel, this.resCase = 'none' === options.resourceCase ? s => s : 'snake' === options.resourceCase ? kitsuCore.snake : kitsuCore.kebab, this.plural = !1 === options.pluralize ? s => s : pluralise, this.headers = Object.assign({}, options.headers, {
      Accept: 'application/vnd.api+json',
      "Content-Type": 'application/vnd.api+json'
    }), this.axios = axios.create({
      baseURL: options.baseURL || 'https://kitsu.io/api/edge',
      timeout: options.timeout || 30000
    }), this.fetch = this.get, this.update = this.patch, this.create = this.post, this.remove = this.delete;
  }

  get(model, params = {}, headers = {}) {
    var _this = this;

    return _asyncToGenerator(function* () {
      try {
        let _model$split = model.split('/'),
            _model$split2 = _slicedToArray(_model$split, 3),
            res = _model$split2[0],
            id = _model$split2[1],
            relationship = _model$split2[2],
            url = _this.plural(_this.resCase(res));

        id && (url += `/${id}`), relationship && (url += `/${_this.resCase(relationship)}`);

        const _ref = yield _this.axios.get(url, {
          params,
          paramsSerializer: p => kitsuCore.query(p),
          headers: Object.assign(_this.headers, headers)
        }),
              data = _ref.data;

        return kitsuCore.deserialise(data);
      } catch (E) {
        throw kitsuCore.error(E);
      }
    })();
  }

  patch(model, body, headers = {}) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      try {
        const serialData = yield kitsuCore.serialise.apply(_this2, [model, body, 'PATCH']),
              url = _this2.plural(_this2.resCase(model)) + '/' + body.id,
              _ref2 = yield _this2.axios.patch(url, serialData, {
          headers: Object.assign(_this2.headers, headers)
        }),
              data = _ref2.data;

        return data;
      } catch (E) {
        throw kitsuCore.error(E);
      }
    })();
  }

  post(model, body, headers = {}) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      try {
        const url = _this3.plural(_this3.resCase(model)),
              _ref3 = yield _this3.axios.post(url, (yield kitsuCore.serialise.apply(_this3, [model, body])), {
          headers: Object.assign(_this3.headers, headers)
        }),
              data = _ref3.data;

        return data;
      } catch (E) {
        throw kitsuCore.error(E);
      }
    })();
  }

  delete(model, id, headers = {}) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      try {
        const url = _this4.plural(_this4.resCase(model)) + '/' + id,
              _ref4 = yield _this4.axios.delete(url, {
          data: yield kitsuCore.serialise.apply(_this4, [model, {
            id
          }, 'DELETE']),
          headers: Object.assign(_this4.headers, headers)
        }),
              data = _ref4.data;

        return data;
      } catch (E) {
        throw kitsuCore.error(E);
      }
    })();
  }

  self(params = {}, headers = {}) {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      try {
        const res = yield _this5.get('users', Object.assign({
          filter: {
            self: !0
          }
        }, params), headers);
        return res.data[0];
      } catch (E) {
        throw kitsuCore.error(E);
      }
    })();
  }

}

module.exports = Kitsu;
